#!/usr/bin/bash
# (c) Dayne Broderson 2024
# T3XHELP: DecTalk installer
# TODO: cache a build to speed this up on older RPis

DEFAULT_DECTALK_INSTALL="$HOME/.local/share/dectalk"
DECTALK_INSTALL=${DECTALK_INSTALL:-$DEFAULT_DECTALK_INSTALL}

# exit if any command fails
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
set -e 

if ! type boom &> /dev/null; then
  # define boom if it isn't defined yet
  function boom() {
    echo "Boom: $1"
    exit 1
  }

fi

APT_DEPS="build-essential libasound2-dev libpulse-dev libgtk2.0-dev unzip git pkg-config autoconf automake libtool"
MISSING_PKGS=""

for pkg in $APT_DEPS; do
  if ! dpkg -l | grep -qw $pkg; then
    MISSING_PKGS="$MISSING_PGKS $pkg"
  fi
done

if [ -n "$MISSING_PKGS" ]; then
  echo "Installing missing packages: $MISSING_PKGS"
  sudo apt update 
  sudo apt install -y $MISSING_PKGS
else
  echo "All package are already installed .. skipping install"
fi

if [ ! -d $DECTALK_INSTALL ]; then
  echo mkdir -p $DECTALK_INSTALL
  mkdir -p $DECTALK_INSTALL
fi

cd $DECTALK_INSTALL || { boom "failed to cd $DECTALK_INSTALL"; }

pwd

if [ ! -d .git ]; then
  git clone https://github.com/dectalk/dectalk . || { boom "git clone failed"; }
else 
  echo "skipping clone: dectalk dir exists"
  echo "doing a git pull instead"
  git pull
fi

if [ $? -eq 0 ]; then
  cd src
else
  boom "git clone dectalk failed"
fi


INSTALL_PREFIX=${INSTALL_PREFIX:-$DECTALK_INSTALL/dist}
echo "############### BEGIN BUILD #####################"
echo INSTALL_PREFIX=$INSTALL_PREFIX
sleep 1
set -x # start debugging mode

if [ ! -d m4 ]; then
  mkdir -p m4
  cp  /usr/share/aclocal/pkg.m4 m4/
  autoconf -fi
fi


autoconf || { boom "autoconf -si"; }  # -si ??

if [ ! -f config.guess ]; then
  echo "Missing config.guess -- pulling from /usr/share/automake*"
  cp /usr/share/automake*/config.guess .
fi

if [ ! -f config.sub ]; then
  echo "Missing config.sub -- pulling from /usr/share/automake*"
  cp /usr/share/automake*/config.sub . 
fi

./configure --prefix=$INSTALL_PREFIX || { boom "./configure --prefix=$INSTALL_PREFIX"; }
make -j || { boom "make -j"; }
sleep 1
echo "################# END BUILD #####################"

cd ../dist
pwd
./say -a "beep boop hello I am a robot beep boop" || { boom "./say -a 'hello I am a robot' "; }

set +x # stop debugging mode

if [ -d $HOME/.local/bin ]; then
  if echo $PATH | grep .local/bin >/dev/null; then
    if [ ! -f $HOME/.local/bin/say ]; then
      echo "adding say wrapper to $HOME/.local/bin from $SCRIPT_DIR"
      cp "$SCRIPT_DIR/say.sh" "$HOME/.local/bin/say"
      chmod +x "$HOME/.local/bin/say"
    else
      echo "skipping wrapper: $home/.local/bin/say exists"
    fi
  fi
else
  echo "say command available in `pwd`"
fi

sleep 1


# check for interactive shell
if test -t 0; then
  # yay.. let us ask if they want a song
  read -p "Do you want to hear a song? (y/n) " answer
  if [[ $answer == [Yy]* ]]; then
    echo dectalk song credit to scruss 
    echo https://scruss.com/blog/2023/05/30/a-terrible-guide-to-singing-with-dectalk/
    say -pre '[:PHONE ON]' -a '[:nv] [:dv gn 73] [AY<400,330> KAE<200,247> N<100> T<100> SIY<400,208> MIY<400,165> LAH<200,147> VAH<125,185> N<75> NOW<400,220> BAH<200,277> DXIY<200,294> BAH<300,277> T<100> YU<600,247> FOR<200,208> AO<300,247> LX<100> MAY<400,277> LAY<900,294> F<300> _<400> WEH<300,330> N<100> YXOR<400,247> NIR<400,208> MIY<400,165> BEY<200,147> BIY<200,185> DHAX<400,220> SKAY<125,277> Z<75> WIH<125,294> LX<75> BIY<400,277> BLUW<600,247> FOR<200,208> AO<300,247> LX<100> MAY<400,277> LAY<900,294> F<300> _<300> ].'
  else
    echo "Ok, maybe later"
  fi
else
  # not interactive shell
  echo "No song for you (not in an interactive shell"
fi


