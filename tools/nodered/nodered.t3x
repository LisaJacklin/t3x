#!/usr/bin/env bash
source $(t3x -T)

TOOL_NAME=$(basename "${BASH_SOURCE[0]}" .t3x)
cowsay "Tool time with $TOOL_NAME" | lolcat
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null; pwd)
# Define the path to the template settings file for Node-RED
SETTINGS_TEMPLATE="$SCRIPT_DIR/files/node-red-default-settings.js"
# Define the path to the Node-RED settings file
SETTINGS_FILE="$HOME/.node-red/settings.js"

just_exit=false
args_collected=false
while_loop_done=false
declare -a keep_args

function nodered_check_installed
{
  if command -v node-red &> /dev/null; then
    return 0
  else
    echo "node-red feature not found. Try using the setup command to install it."
    return 1
  fi
}

function nodered_restart_if_running
{
  if pgrep -x "node-red" >/dev/null; then
    echo "Outdated Node-RED configuration is still running. Attempting to restart..."
    node-red-restart
    echo "Node-RED configuration updated. Please verify that Node-RED is running locally as intended."
  else
    echo "Node-RED configuration updated."
  fi
}

function install_nodered
{
    echo "running node red installer..."
    bash <(curl -sL https://raw.githubusercontent.com/node-red/linux-installers/master/deb/update-nodejs-and-nodered) --confirm-root --confirm-install --confirm-pi --no-init

    echo "restoring node red settings from t3x default..."
    cp "$SETTINGS_TEMPLATE" "$SETTINGS_FILE"
    # Check if the cp command succeeded
    if [ $? -ne 0 ]; then
      echo "Failed to copy from default settings file. This could be due to an unsuccessful or corrupt node-red installation, or because it is open in another program."
      exit 1
    else
      echo "successfully loaded default settings."
    fi
}

# modify the settings to bind node red to be hosted locally, then restart node red to apply the changes.
function lockdown_nodered
{
    nodered_check_installed
    # Backup the original settings file
    cp "$SETTINGS_FILE" "$SETTINGS_FILE.bak"
    # Check if 'uiHost' is already configured
    if grep -q "uiHost:" "$SETTINGS_FILE"; then
        # replace all lines with "uihost:" so that they target the loopback interface
        awk '{if ($0 ~ /uiHost:/) print "\tuiHost: \"127.0.0.1\","; else print}' "$SETTINGS_FILE.bak" > "$SETTINGS_FILE"
        if [ $? -ne 0 ]; then
          echo "Failed to bind node red to be hosted locally. Do not run node red unless remote authentication is enabled."
          exit 1
        else
          echo "Updated 'uiHost' to '127.0.0.1' in the settings file."
        fi
    else
        # 'uiHost:' not found; add it to the settings file
        echo "uiHost: '127.0.0.1'," >> "$SETTINGS_FILE"
        echo "Added 'uiHost' setting to run locally."
    fi
    nodered_restart_if_running
}

while [[ $# -gt 0 ]]; do
  if [ "$while_loop_done" == true ]; then
    break # we hit the --- and just need to move on now
  fi
  case "$1" in
    help)
      shift
      echo "usage: nodered [ARGS] COMMAND [ARGS]"
      echo "  help      # this help"
      echo "  setup     #  "
      echo "  lockdown  #  "
      echo "  unlock    #  "
      echo 
      t3x_scripts_list $SCRIPT_DIR
      exit 0
      ;;
    setup)
      echo "setting up t3 nodered"
      install_nodered
      if [ $? -ne 0 ]; then
        echo "Node-RED setup failed. Aborting all operations."
        exit 1
      else
        shift
      fi
      ;;
    lockdown)
      info "locking down" 
      lockdown_nodered
      if [ $? -ne 0 ]; then
        echo "Node-RED lockdown failed. Aborting all operations."
        exit 1
      else
        shift
      fi
      ;;
    unlock)
      boom "TODO: Not implimented (feel free to hack on this code)"
      ;;
    ---)
      keep_args=(${keep_args[@]} "$@")
      while_loop_done=true
      break;  # just let the rest of the arguments carry on
      ;;
    *)
      keep_args+=("$1")
      shift
      ;;
  esac
done

set -- ${keep_args[@]}

command=$1
debug "command=$command"
shift

script="$SCRIPT_DIR/scripts/$command.sh"
debug "checking for script=$script"
if [ -f "$script" ]; then
  info "running script $script"
  $script $@
  exit $?
fi

error "Error: No $command command .. try asking for help"
